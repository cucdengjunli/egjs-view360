{"version":3,"file":"view360.spinviewer.pkgd.js","sources":["../../src/utils/browser.ts","../../src/utils/browserFeature.ts","../../src/version.ts","../../src/SpinViewer/SpriteImage.ts","../../src/SpinViewer/SpinViewer.ts","../../src/SpinViewer/index.umd.ts"],"sourcesContent":["/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport getAgent from \"@egjs/agent\";\n\n/* eslint-disable no-new-func, no-nested-ternary */\nconst win = typeof window !== \"undefined\" && window.Math === Math\n  ? window\n  : typeof self !== \"undefined\" && self.Math === Math\n    ? self\n    : Function(\"return this\")();\n/* eslint-enable no-new-func, no-nested-ternary */\n\nconst doc = win.document;\nconst nav = win.navigator;\nconst agent = getAgent();\nconst osName = agent.os.name;\nconst browserName = agent.browser.name;\nconst IS_IOS = osName === \"ios\";\nconst IS_SAFARI_ON_DESKTOP = osName === \"mac\" && browserName === \"safari\";\nconst IS_SAMSUNG_BROWSER = browserName === \"samsung internet\";\n\nexport {\n\twin as window,\n\tdoc as document,\n  nav as navigator,\n\tIS_IOS,\n\tIS_SAFARI_ON_DESKTOP,\n\tIS_SAMSUNG_BROWSER\n};\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { window as win, document as doc } from \"./browser\";\n\nwin.Float32Array = (typeof win.Float32Array !== \"undefined\") ? win.Float32Array : win.Array;\n\nconst Float32Array = win.Float32Array;\nconst getComputedStyle = win.getComputedStyle;\nconst userAgent = win.navigator && win.navigator.userAgent;\nconst SUPPORT_TOUCH = \"ontouchstart\" in win;\nconst SUPPORT_DEVICEMOTION = \"ondevicemotion\" in win;\nconst DeviceMotionEvent = win.DeviceMotionEvent;\nconst devicePixelRatio = win.devicePixelRatio;\n\nconst TRANSFORM = (() => {\n\tconst docStyle = doc?.documentElement.style ?? {};\n\tconst target = [\"transform\", \"webkitTransform\", \"msTransform\", \"mozTransform\"];\n\n\tfor (let i = 0, len = target.length; i < len; i++) {\n\t\tif (target[i] in docStyle) {\n\t\t\treturn target[i];\n\t\t}\n\t}\n\treturn \"\";\n})();\n\n// check for will-change support\nconst SUPPORT_WILLCHANGE = win.CSS && win.CSS.supports &&\n\twin.CSS.supports(\"will-change\", \"transform\");\n\nlet WEBXR_SUPPORTED = false;\n\nconst checkXRSupport = () => {\n  const navigator = window.navigator as any;\n\n\tif (!navigator.xr) {\n\t\treturn;\n\t}\n\n\tif (navigator.xr.isSessionSupported) {\n\t\tnavigator.xr.isSessionSupported(\"immersive-vr\").then(res => {\n\t\t\tWEBXR_SUPPORTED = res;\n\t\t}).catch(() => {}); // tslint:disable-line no-empty\n\t} else if (navigator.xr.supportsSession) {\n\t\tnavigator.xr.supportsSession(\"immersive-vr\").then(res => {\n\t\t\tWEBXR_SUPPORTED = res;\n\t\t}).catch(() => {}); // tslint:disable-line no-empty\n\t}\n}\n\nexport {\n\tFloat32Array,\n\tgetComputedStyle,\n\tuserAgent,\n\tTRANSFORM,\n\tSUPPORT_TOUCH,\n\tSUPPORT_DEVICEMOTION,\n\tSUPPORT_WILLCHANGE,\n\tcheckXRSupport,\n\tWEBXR_SUPPORTED,\n\tDeviceMotionEvent,\n\tdevicePixelRatio\n};\n\n","const VERSION = \"#__VERSION__#\";\n\nexport {\n\tVERSION\n};\n","import Component from \"@egjs/component\";\nimport { TRANSFORM, SUPPORT_WILLCHANGE } from \"../utils/browserFeature\";\nimport { VERSION } from \"../version\";\n\nexport type SpriteImageEvent = {\n  /**\n   * Events that occur when component loading is complete\n   * @ko 컴포넌트 로딩이 완료되면 발생하는 이벤트\n   * @name eg.view360.SpriteImage#load\n   * @event\n   * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n   * @param {HTMLElement} param.target The target element for which to display the image <ko>이미지를 보여줄 대상 엘리먼트</ko>\n   * @param {HTMLElement} param.bgElement Generated background image element <ko>생성된 background 이미지 엘리먼트</ko>\n   *\n   * @example\n   *\n   * sprites.on({\n   *  \"load\" : function(evt) {\n   *    console.log(\"load event fired - e.target\", e.target, \"e.bgElement\", e.bgElement);\n   *  }\n   * });\n   */\n  load: {\n    target: HTMLElement;\n    bgElement: HTMLDivElement;\n  }\n  /**\n   * An event that occurs when the image index is changed by the user's left / right panning\n   * @ko 사용자의 좌우 Panning 에 의해 이미지 인덱스가 변경되었을때 발생하는 이벤트\n   * @name eg.view360.SpriteImage#imageError\n   * @event\n   * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n   * @param {String} param.imageUrl User-specified image URL <ko>사용자가 지정한 이미지 URL</ko>\n   *\n   * @example\n   *\n   * sprites.on({\n   *  \"imageError\" : function(evt) {\n   *    // Error handling\n   *    console.log(e.imageUrl);\n   *  }\n   * });\n   */\n  imageError: {\n    imageUrl?: string;\n  }\n}\n\n/**\n * @memberof eg.view360\n * @extends eg.Component\n * SpriteImage\n */\nclass SpriteImage extends Component<SpriteImageEvent> {\n  public static VERSION = VERSION;\n\n  private _el: HTMLElement;\n  private _rowCount: number;\n  private _colCount: number;\n  private _totalCount: number;\n  private _width: number | string;\n  private _height: number | string;\n  private _autoHeight: boolean;\n  private _colRow: number[];\n  private _image: HTMLImageElement;\n  private _bg: HTMLDivElement;\n  private _autoPlayReservedInfo: { interval: number; playCount: number; } | null;\n  private _autoPlayTimer: number;\n\n  /**\n   * @class eg.view360.SpriteImage\n   * @classdesc A module that displays a single or continuous image of any one of the \"sprite images\". SpinViewer internally uses SpriteImage to show each frame of the sprite image.\n   * @ko 스프라이트 이미지 중 임의의 한 프레임을 단발성 혹은 연속적으로 보여주는 컴포넌트입니다. SpinViewer 는 내부적으로 SpriteImage 를 사용하여 스프라이트 이미지의 각 프레임을 보여줍니다.\n   * @extends eg.Component\n   *\n   * @param {HTMLElement} element The element to show the image <ko>이미지를 보여줄 대상 요소</ko>\n   * @param {Object} options The option object<ko>파라미터 객체</ko>\n   * @param {String} options.imageUrl The url of the sprite image <ko>스프라이트 이미지의 url</ko>\n   * @param {Number} [options.rowCount=1] Number of horizontal frames in the sprite image <ko>스프라이트 이미지의 가로 프레임 갯수</ko>\n   * @param {Number} [options.colCount=1] Number of vertical frames in the sprite image <ko>스프라이트 이미지의 세로 프레임 갯수</ko>\n   * @param {Number|String} [options.width=\"auto\"] The width of the target element to show the image <ko>이미지를 보여줄 대상 요소의 너비</ko>\n   * @param {Number|String} [options.height=\"auto\"] The height of the target element to show the image <ko>이미지를 보여줄 대상 요소의 높이</ko>\n   * @param {Boolean} [options.autoHeight=true] Whether to automatically set the height of the image area to match the original image's proportion <ko>원본 이미지 비율에 맞게 이미지 영역의 높이를 자동으로 설정할지 여부</ko>\n   * @param {Number[]} [options.colRow=[0, 0]] The column, row coordinates of the first frame of the sprite image (based on 0 index) <ko> 스프라이트 이미지 중 처음 보여줄 프레임의 (column, row) 좌표 (0 index 기반)</ko>\n   * @param {Number} [options.frameIndex=0] frameIndex specifies the index of the frame to be displayed in the \"Sprite image\". The frameIndex order is zero-based and indexed in Z form (left-to-right, top-to-bottom, and newline again from left to right).<br>- colRow is equivalent to frameIndex. However, if colRow is specified at the same time, colRow takes precedence.<ko>스프라이트 이미지 중에서 보여질 프레임의 인덱스를 지정합니다. frameIndex 순서는 0부터 시작하며 Z 형태(왼쪽에서 오른쪽, 위에서 아래, 개행 시 다시 왼쪽 부터)로 인덱싱합니다.<br>- colRow 는 frameIndex 와 동일한 기능을 합니다. 단, colRow 가 동시에 지정된 경우 colRow 가 우선합니다.</ko>\n   * @param {Number} [options.scale=1] Spin scale (The larger the spin, the more).<ko>Spin 배율 (클 수록 더 많이 움직임)</ko>\n   *\n   * @support {\"ie\": \"9+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.3+ (except 3.x)\"}\n   * @example\n   *\n   * // Initialize SpriteImage\n   *\n   * var el = document.getElementById(\"image-div\");\n   * var sprites = new eg.view360.SpriteImage(el, {\n   * \timageUrl: \"/img/bag360.jpg\", // required\n   * \trowCount: 24\n   * });\n   */\n  constructor(element: HTMLElement, options: Partial<{\n    imageUrl: string;\n    rowCount: number;\n    colCount: number;\n    width: number | string;\n    height: number | string;\n    autoHeight: boolean;\n    colRow: number[];\n    frameIndex: number;\n    scale: number;\n  }> = {}) {\n    super();\n    const opt = options || {};\n\n    this._el = element;\n    this._rowCount = opt.rowCount || 1;\n    this._colCount = opt.colCount || 1;\n    this._totalCount = this._rowCount * this._colCount; // total frames\n    this._width = opt.width || \"auto\";\n    this._height = opt.height || \"auto\";\n    this._autoHeight = opt.autoHeight != null ? opt.autoHeight : true; // If autoHeight is specified, _height will be overwritten.\n    this._colRow = [0, 0];\n\n    if (opt.colRow) {\n      this._colRow = opt.colRow;\n    } else if (opt.frameIndex) {\n      this.setFrameIndex(opt.frameIndex);\n    }\n\n    this._el.style.width = SpriteImage._getSizeString(this._width);\n    this._el.style.height = SpriteImage._getSizeString(this._height);\n\n    if (!opt.imageUrl) {\n      setTimeout(() => {\n        this.trigger(\"imageError\", {\n          imageUrl: opt.imageUrl\n        });\n      }, 0);\n      return;\n    }\n\n    this._image = new Image();\n    /**\n     * Event\n     */\n    this._image.onload = () => {\n      this._bg = SpriteImage._createBgDiv(\n        this._image, this._rowCount, this._colCount, this._autoHeight);\n      this._el.appendChild(this._bg);\n      this.setColRow(this._colRow[0], this._colRow[1]);\n\n      this.trigger(\"load\", {\n        target: this._el,\n        bgElement: this._bg\n      });\n\n      if (this._autoPlayReservedInfo) {\n        this.play(this._autoPlayReservedInfo);\n        this._autoPlayReservedInfo = null;\n      }\n    };\n\n    this._image.onerror = e => {\n      this.trigger(\"imageError\", {\n        imageUrl: opt.imageUrl\n      });\n    };\n\n    this._image.src = opt.imageUrl;\n  }\n\n  private static _createBgDiv(img: HTMLImageElement, rowCount: number, colCount: number, autoHeight: boolean) {\n    const el = document.createElement(\"div\");\n\n    el.style.position = \"relative\";\n    el.style.overflow = \"hidden\";\n\n    img.style.position = \"absolute\";\n    img.style.width = `${colCount * 100}%`;\n    img.style.height = `${rowCount * 100}%`;\n    /** Prevent image from being dragged on IE10, IE11, Safari especially */\n    img.ondragstart = () => (false); // img.style.pointerEvents = \"none\";\n    // Use hardware accelerator if available\n    if (SUPPORT_WILLCHANGE) {\n      (img.style.willChange = \"transform\");\n    }\n\n    el.appendChild(img);\n\n    const unitWidth = img.width / colCount;\n    const unitHeight = img.height / rowCount;\n\n    if (autoHeight) {\n      const r = unitHeight / unitWidth;\n\n      el.style.paddingBottom = `${r * 100}%`;\n    } else {\n      el.style.height = \"100%\";\n    }\n\n    return el;\n  }\n\n  private static _getSizeString(size) {\n    if (typeof size === \"number\") {\n      return `${size}px`;\n    }\n\n    return size;\n  }\n\n  /**\n   * Specifies the frameIndex of the frame to be shown in the sprite image.\n   * @ko 스프라이트 이미지 중 보여질 프레임의 frameIndex 값을 지정\n   * @method eg.view360.SpriteImage#setFrameIndex\n   * @param {Number} frameIndex frame index of a frame<ko>프레임의 인덱스</ko>\n   *\n   * @example\n   *\n   * sprites.setFrameIndex(0, 1);// col = 0, row = 1\n   */\n  public setFrameIndex(index: number) {\n    const colRow = this.toColRow(index);\n\n    this.setColRow(colRow[0], colRow[1]);\n  }\n\n  /**\n   * Returns the frameIndex of the frame to be shown in the sprite image.\n   * @ko 스프라이트 이미지 중 보여지는 프레임의 index 값을 반환\n   * @method eg.view360.SpriteImage#getFrameIndex\n   * @return {Number} frame index <ko>frame 인덱스</ko>\n   *\n   * @example\n   *\n   * var frameIndex = sprites.getFrameIndex(); // eg. frameIndex = 1\n   *\n   */\n  public getFrameIndex() {\n    return this._colRow[1] * this._colCount + this._colRow[0];\n  }\n\n  /**\n   * Specifies the col and row values of the frame to be shown in the sprite image.\n   * @ko 스프라이트 이미지 중 보여질 프레임의 col, row 값을 지정\n   * @method eg.view360.SpriteImage#setColRow\n   * @param {Number} col Column number of a frame<ko>프레임의 행값</ko>\n   * @param {Number} row Row number of a frame<ko>프레임의 열값</ko>\n   *\n   * @example\n   *\n   * sprites.setlColRow(1, 2); // col = 1, row = 2\n   */\n  public setColRow(col: number, row: number) {\n    if (row > this._rowCount - 1 || col > this._colCount - 1) {\n      return;\n    }\n\n    if (this._image && TRANSFORM) {\n      // NOTE: Currently, do not apply translate3D for using layer hack. Do we need layer hack for old browser?\n      this._image.style[TRANSFORM] = `translate(${-(col / this._colCount * 100)}%, ${-(row / this._rowCount * 100)}%)`;\n    }\n\n    this._colRow = [col, row];\n  }\n\n  /**\n   * Returns the col and row values of the frame to be shown in the sprite image.\n   * @ko 스프라이트 이미지 중 보여지는 프레임의 col, row 값을환반환\n   * @method eg.view360.SpriteImage#gelColRow\n   * @return {Number[]} Array containing col, row<ko>col, row 정보를 담는 배열</ko>\n   *\n   * @example\n   *\n   * var colRow = sprites.getlColRow();\n   * // colRow = [1, 2] - index of col is 1, index of row is 2\n   *\n   */\n  public getColRow() {\n    return this._colRow;\n  }\n\n  /**\n   * Stop playing\n   * @ko play 되고 있던 프레임 재생을 중지합니다.\n   * @method eg.view360.SpriteImage#stop\n   *\n   * @example\n   *\n   * viewer.stop();\n   *\n   */\n  public stop() {\n    if (this._autoPlayTimer) {\n      clearInterval(this._autoPlayTimer);\n      this._autoPlayTimer = -1;\n    }\n  }\n\n  /**\n   * Switches frames sequentially in the 'interval' starting from the currently displayed frame and plays all frames by 'playCount'.\n   * @ko 현재 보여지고 있는 프레임을 시작으로 'interval' 간격으로 순차적으로 프레임을 전환하며 모든 프레임을 'playCount' 만큼 재생한다.\n   * @method eg.view360.SpriteImage#play\n   * @param {Object} param The parameter object<ko>파라미터 객체</ko>\n   * @param {Number} [param.interval=1000 / totalFrameCount] Interframe Interval - in milliseconds<ko>프레임간 간격 - 밀리세컨드 단위</ko>\n   * @param {Number} [param.playCount=0] PlayCount = 1 in which all frames are reproduced once, and playCount = n in which all frames are repeated n times. playCount = 0 in which all frames are repeated infinitely<ko>모든 프레임을 1회씩 재생한 것이 playCount = 1, 모든 프레임을 n 회 재상한 것이 playCount = n 이 된다. 0 dms 무한반복</ko>\n   *\n   * @example\n   *\n   * viewer.play({angle: 16, playCount: 1});\n   *\n   */\n  public play({ interval, playCount } = { interval: 1000 / this._totalCount, playCount: 0 }) {\n    if (!this._bg) {\n      this._autoPlayReservedInfo = {interval, playCount};\n      return;\n    }\n\n    if (this._autoPlayTimer) {\n      clearInterval(this._autoPlayTimer);\n      this._autoPlayTimer = -1;\n    }\n\n    let frameIndex = this.getFrameIndex();\n    let count = 0;\n    let frameCount = 0; // for checking 1 cycle\n\n    this._autoPlayTimer = window.setInterval(() => {\n      frameIndex %= this._totalCount;\n      const colRow = this.toColRow(frameIndex);\n\n      this.setColRow(colRow[0], colRow[1]);\n      frameIndex++;\n\n      // Done 1 Cycle?\n      if (++frameCount === this._totalCount) {\n        frameCount = 0;\n        count++;\n      }\n\n      if (playCount > 0 && count === playCount) {\n        clearInterval(this._autoPlayTimer);\n      }\n    }, interval);\n  }\n\n  public toColRow(frameIndex: number) {\n    const colCount = this._colCount;\n    const rowCount = this._rowCount;\n\n    if (frameIndex < 0) {\n      return [0, 0];\n    } else if (frameIndex >= this._totalCount) {\n      return [colCount - 1, rowCount - 1];\n    }\n\n    const col = frameIndex % colCount;\n    const row = Math.floor(frameIndex / colCount);\n\n    // console.log(frameIndex, col, row);\n    return [col, row];\n  }\n}\n\nexport default SpriteImage;\n","import Component from \"@egjs/component\";\nimport Axes, { PanInput } from \"@egjs/axes\";\nimport SpriteImage from \"./SpriteImage\";\nimport { VERSION } from \"../version\";\n\nconst DEFAULT_PAN_SCALE = 0.21;\n\nexport type SpinViewerEvent = {\n  /**\n   * Events that occur when component loading is complete\n   * @ko 컴포넌트 로딩이 완료되면 발생하는 이벤트\n   * @name eg.view360.SpinViewer#load\n   * @event\n   * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n   * @param {HTMLElement} param.target The target element for which to display the image <ko>이미지를 보여줄 대상 엘리먼트</ko>\n   * @param {HTMLElement} param.bgElement Generated background image element <ko>생성된 background 이미지 엘리먼트</ko>\n   *\n   * @example\n   *\n   * viwer.on({\n   *  \"load\" : function(evt) {\n   *    this.spinBy(360, {duration: 300});\n   *  }\n   * });\n   */\n  load: {\n    target: HTMLElement;\n    bgElement: HTMLDivElement;\n  }\n  /**\n   * An event that occurs when the image index is changed by the user's left / right panning\n   * @ko 사용자의 좌우 Panning 에 의해 이미지 인덱스가 변경되었을때 발생하는 이벤트\n   * @name eg.view360.SpinViewer#imageError\n   * @event\n   * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n   * @param {String} param.imageUrl User-specified image URL <ko>사용자가 지정한 이미지 URL</ko>\n   *\n   * @example\n   *\n   * viewer.on({\n   *  \"imageError\" : function(evt) {\n   *    // Error handling\n   *    console.log(e.imageUrl);\n   *  }\n   * });\n   */\n  imageError: {\n    imageUrl?: string;\n  };\n  /**\n   * An event that occurs when the image index is changed by the user's left / right panning\n   * @ko 사용자의 좌우 Panning 에 의해 이미지 인덱스가 변경되었을때 발생하는 이벤트\n   * @name eg.view360.SpinViewer#change\n   * @event\n   * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n   * @param {Number[]} param.colRow Column, row of the frame in the sprite image <ko>스프라이트 이미지 내 프레임의 column, row</ko>\n   * @param {Number} param.frameIndex Index value that is sequentially appended in Z direction based on col and row.<ko>col, row 를 기반으로 Z 방향으로 순차적으로 붙여지는 index 값</ko>\n   * @param {Number} param.angle The angle that is currently internally held at an angle between 0 and 359. (not a real product angle) <ko>0 ~ 359 범위의 각도로 현재 내부적으로 유지하고 있는 각도 (실제 이미지의 각도가 아님)</ko>\n   *\n   * @example\n   *\n   * viwer.on({\n   *  \"change\" : function(evt) {\n   *    console.log(event.frameIndex, event.colRow, event.angle);   // event.colRow = [0, 4] event.frameIndex = 4, event = 30\n   *  }\n   * });\n   */\n  change: {\n    colRow: number[];\n    frameIndex: number;\n    angle: number;\n  };\n  /**\n   * This event is fired when animation ends.\n   * @ko 에니메이션이 끝났을 때 발생하는 이벤트\n   * @name eg.view360.SpinViewer#animationEnd\n   * @event\n   * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n   * @param {Boolean} param.isTrusted true if an event was generated by the user action, or false if it was caused by a script or API call<ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n   *\n   * @example\n   *\n   * viwer.on({\n   *  animationEnd\" : function(evt) {\n   *    // evt.isTrusted === true or false\n   *  }\n   * });\n   */\n  animationEnd: {\n    isTrusted: boolean;\n  }\n}\n\n/**\n * @memberof eg.view360\n * @extends eg.Component\n * SpinViewer\n */\nclass SpinViewer extends Component<SpinViewerEvent> {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @static\n   * @example\n   * eg.view360.SpinViewer.VERSION;  // ex) 3.0.1\n   * @memberof eg.view360.SpinViewer\n   */\n  public static VERSION = VERSION;\n\n  private _el: HTMLElement;\n  private _sprites: SpriteImage;\n  private _axes: Axes;\n  private _panInput: PanInput;\n\n  private _scale: number;\n  private _panScale: number;\n  private _frameCount: number;\n\n  /**\n   * @classdesc A module used to displays each image sequentially according to the direction of the user's touch movement (left / right) of the sprite image that is collected by rotating the object.\n   * @ko 물체 주위를 회전하여 촬영한 이미지들을 모은 스프라이트 이미지를 사용자의 터치 이동 방향(좌 / 우) 에 따라 각 이미지들을 순차적으로 보여주는 컴포넌트입니다.\n   *\n   * @param {HTMLElement} element The element to show the image <ko>이미지를 보여줄 대상 요소</ko>\n   * @param {Object} options The option object<ko>파라미터 객체</ko>\n   * @param {String} options.imageUrl The url of the sprite image <ko>스프라이트 이미지의 url</ko>\n   * @param {Number} [options.rowCount=1] Number of horizontal frames in the sprite image <ko>스프라이트 이미지의 가로 프레임 갯수</ko>\n   * @param {Number} [options.colCount=1] Number of vertical frames in the sprite image <ko>스프라이트 이미지의 세로 프레임 갯수</ko>\n   * @param {Number|String} [options.width=\"auto\"] The width of the target element to show the image <ko>이미지를 보여줄 대상 요소의 너비</ko>\n   * @param {Number|String} [options.height=\"auto\"] The height of the target element to show the image <ko>이미지를 보여줄 대상 요소의 높이</ko>\n   * @param {Boolean} [options.autoHeight=true] Whether to automatically set the height of the image area to match the original image's proportion <ko>원본 이미지 비율에 맞게 이미지 영역의 높이를 자동으로 설정할지 여부</ko>\n   * @param {Number[]} [options.colRow=[0, 0]] The column, row coordinates of the first frame of the sprite image (based on 0 index) <ko> 스프라이트 이미지 중 처음 보여줄 프레임의 (column, row) 좌표 (0 index 기반)</ko>\n   * @param {Number} [options.scale=1] Spin scale (The larger the spin, the more).<ko>Spin 배율 (클 수록 더 많이 움직임)</ko>\n   * @support {\"ie\": \"9+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.3+ (except 3.x)\"}\n   * @example\n   * ```\n   * // Initialize SpinViewer\n   * var el = document.getElementById(\"product-360\");\n   * var viewer = new eg.view360.SpinViewer(el, {\n   * \timageUrl: \"/img/bag360.jpg\", // required\n   * \trowCount: 24 //required\n   * });\n   * ```\n   */\n  constructor(element: HTMLElement, options: Partial<{\n    imageUrl: string;\n    rowCount: number;\n    colCount: number;\n    width: number | string;\n    height: number | string;\n    autoHeight: boolean;\n    colRow: number[];\n    scale: number;\n  }> = {}) {\n    super();\n\n    this._el = element;\n\n    const opt = {...options};\n    const colCount = opt.colCount || 1;\n    const rowCount = opt.rowCount || 1;\n\n    this._scale = (opt.scale || 1);\n    this._panScale = this._scale * DEFAULT_PAN_SCALE;\n\n    this._frameCount = colCount * rowCount;\n\n    // Init SpriteImage\n    this._sprites = new SpriteImage(element, opt).on({\n      \"load\": evt => {\n        this.trigger(\"load\", evt);\n      },\n      \"imageError\": evt => {\n        this.trigger(\"imageError\", {\n          imageUrl: evt.imageUrl\n        });\n      }\n    });\n\n    // Init Axes\n    this._panInput = new PanInput(this._el, {\n      scale: [this._panScale, this._panScale]\n    });\n    this._axes = new Axes({\n      angle: {\n        range: [0, 359],\n        circular: true\n      }\n    }).on({\n      \"change\": evt => {\n        const curr = Math.floor(evt.pos.angle / (360 / this._frameCount));\n        const frameIndex = this._frameCount - curr - 1;\n\n        this._sprites.setFrameIndex(frameIndex);\n\n        this.trigger(\"change\", {\n          frameIndex,\n          colRow: this._sprites.getColRow(),\n          angle: evt.pos.angle\n        });\n      },\n      \"animationEnd\": evt => {\n        this.trigger(\"animationEnd\", {\n          isTrusted: evt.isTrusted\n        });\n      }\n    });\n\n    this._axes.connect(\"angle\", this._panInput);\n  }\n\n  /**\n   * Set spin scale\n   * @ko scale 을 조정할 수 있는 함수\n   * @param {Number} scale Rotation multiples at spin, the larger the rotation<ko>Spin 시 회전 배수값, 커질 수록 더 많이 회전</ko>\n   *\n   * @return {Object} Instance of SpinViewer <ko>SpinViewer 인스턴스</ko>\n   *\n   * @example\n   * viewer.setScale(2);// It moves twice as much.\n   */\n  public setScale(scale: number) {\n    if (isNaN(scale) || scale < 0) {\n      return this;\n    }\n\n    this._scale = scale;\n    this._panScale = scale * DEFAULT_PAN_SCALE;\n    this._panInput.options.scale = [this._panScale, this._panScale];\n\n    return this;\n  }\n\n  /**\n   * Get spin scale\n   * @ko scale 값을 반환한다.\n   *\n   * @return {Number} Rotation multiples at spin, the larger the rotation<ko>Spin 시 회전 배수값, 커질 수록 더 많이 회전</ko>\n   *\n   * @example\n   * viewer.getScale();// It returns number\n   */\n  public getScale() {\n    return this._scale;\n  }\n\n  /**\n   * It gives the effect of rotating for a certain duration by the specified angle based on the current rotation angle.\n   * @ko 현재 회전 각도를 기준으로 지정된 각도(angle)만큼 일정 시간동안(duration) 회전하는 효과를 준다.\n   * @param {Number} [angle = 0] angle<ko>상대적 회전 각도</ko>\n   * @param {Object} param The parameter object<ko>파라미터 객체</ko>\n   * @param {Number} [param.duration = 0] duration<ko>회전할 시간 - 밀리세컨드 단위</ko>\n   *\n   * @return {Object} Instance of SpinViewer <ko>SpinViewer 인스턴스</ko>\n   *\n   * @example\n   * viewer.spinBy(720, {duration: 500});\n   */\n  public spinBy(angle = 0, param = {duration: 0}) {\n    this._axes.setBy({angle}, param.duration);\n    return this;\n  }\n\n  /**\n   * It gives the effect of rotating for a certain duration (duration) by the specified angle (angle).\n   * @ko 지정된 각도(angle)만큼 일정 시간동안(duration) 회전하는 효과를 준다.\n   * @param {Number} [angle = 0] angle<ko>회전 각도</ko>\n   * @param {Object} param The parameter object<ko>파라미터 객체</ko>\n   * @param {Number} [param.duration = 0] duration<ko>회전할 시간 - 밀리세컨드 단위</ko>\n   *\n   * @return {Object} Instance of SpinViewer <ko>SpinViewer 인스턴스</ko>\n   *\n   * @example\n   * viewer.spinTo(30, {duration:100});\n   */\n  public spinTo(angle = 0, param = {duration: 0}) {\n    this._axes.setTo({angle}, param.duration);\n    return this;\n  }\n\n  /**\n   * Returns current angles\n   * @ko 현재 각도를 반환한다.\n   *\n   * @return {Number} Current angle <ko>현재 각도</ko>\n   */\n  public getAngle() {\n    return this._axes.get().angle || 0;\n  }\n}\n\nexport default SpinViewer;\n","import SpinViewer from \"./SpinViewer\";\nimport SpriteImage from \"./SpriteImage\";\nimport { VERSION } from \"../version\";\n\nexport default {\n  SpinViewer,\n  SpriteImage,\n  VERSION,\n}\n"],"names":["win","window","Math","self","Function","doc","document","nav","navigator","agent","getAgent","osName","os","name","browserName","browser","Float32Array","Array","getComputedStyle","userAgent","DeviceMotionEvent","devicePixelRatio","TRANSFORM","docStyle","documentElement","style","target","i","len","length","SUPPORT_WILLCHANGE","CSS","supports","VERSION","__extends","element","options","_super","opt","_this","_el","_rowCount","rowCount","_colCount","colCount","_totalCount","_width","width","_height","height","_autoHeight","autoHeight","_colRow","colRow","frameIndex","setFrameIndex","SpriteImage","_getSizeString","imageUrl","setTimeout","trigger","_image","Image","onload","_bg","_createBgDiv","appendChild","setColRow","bgElement","_autoPlayReservedInfo","play","onerror","e","src","img","el","createElement","position","overflow","ondragstart","willChange","unitWidth","unitHeight","r","paddingBottom","size","index","toColRow","col","row","_autoPlayTimer","clearInterval","_a","_b","interval","playCount","getFrameIndex","count","frameCount","setInterval","floor","Component","DEFAULT_PAN_SCALE","_scale","scale","_panScale","_frameCount","_sprites","on","evt","_panInput","PanInput","_axes","Axes","angle","range","circular","curr","pos","getColRow","isTrusted","connect","isNaN","param","duration","setBy","setTo","get","SpinViewer"],"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"}