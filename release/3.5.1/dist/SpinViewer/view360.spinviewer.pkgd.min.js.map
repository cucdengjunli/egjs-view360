{"version":3,"file":"view360.spinviewer.pkgd.min.js","sources":["../../src/utils/browser.ts","../../src/utils/browserFeature.ts","../../src/version.ts","../../src/SpinViewer/SpriteImage.ts","../../src/SpinViewer/index.umd.ts","../../src/SpinViewer/SpinViewer.ts"],"sourcesContent":["/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport getAgent from \"@egjs/agent\";\n\n/* eslint-disable no-new-func, no-nested-ternary */\nconst win = typeof window !== \"undefined\" && window.Math === Math\n  ? window\n  : typeof self !== \"undefined\" && self.Math === Math\n    ? self\n    : Function(\"return this\")();\n/* eslint-enable no-new-func, no-nested-ternary */\n\nconst doc = win.document;\nconst nav = win.navigator;\nconst agent = getAgent();\nconst osName = agent.os.name;\nconst browserName = agent.browser.name;\nconst IS_IOS = osName === \"ios\";\nconst IS_SAFARI_ON_DESKTOP = osName === \"mac\" && browserName === \"safari\";\nconst IS_SAMSUNG_BROWSER = browserName === \"samsung internet\";\n\nexport {\n\twin as window,\n\tdoc as document,\n  nav as navigator,\n\tIS_IOS,\n\tIS_SAFARI_ON_DESKTOP,\n\tIS_SAMSUNG_BROWSER\n};\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { window as win, document as doc } from \"./browser\";\n\nwin.Float32Array = (typeof win.Float32Array !== \"undefined\") ? win.Float32Array : win.Array;\n\nconst Float32Array = win.Float32Array;\nconst getComputedStyle = win.getComputedStyle;\nconst userAgent = win.navigator && win.navigator.userAgent;\nconst SUPPORT_TOUCH = \"ontouchstart\" in win;\nconst SUPPORT_DEVICEMOTION = \"ondevicemotion\" in win;\nconst DeviceMotionEvent = win.DeviceMotionEvent;\nconst devicePixelRatio = win.devicePixelRatio;\n\nconst TRANSFORM = (() => {\n\tconst docStyle = doc?.documentElement.style ?? {};\n\tconst target = [\"transform\", \"webkitTransform\", \"msTransform\", \"mozTransform\"];\n\n\tfor (let i = 0, len = target.length; i < len; i++) {\n\t\tif (target[i] in docStyle) {\n\t\t\treturn target[i];\n\t\t}\n\t}\n\treturn \"\";\n})();\n\n// check for will-change support\nconst SUPPORT_WILLCHANGE = win.CSS && win.CSS.supports &&\n\twin.CSS.supports(\"will-change\", \"transform\");\n\nlet WEBXR_SUPPORTED = false;\n\nconst checkXRSupport = () => {\n  const navigator = window.navigator as any;\n\n\tif (!navigator.xr) {\n\t\treturn;\n\t}\n\n\tif (navigator.xr.isSessionSupported) {\n\t\tnavigator.xr.isSessionSupported(\"immersive-vr\").then(res => {\n\t\t\tWEBXR_SUPPORTED = res;\n\t\t}).catch(() => {}); // tslint:disable-line no-empty\n\t} else if (navigator.xr.supportsSession) {\n\t\tnavigator.xr.supportsSession(\"immersive-vr\").then(res => {\n\t\t\tWEBXR_SUPPORTED = res;\n\t\t}).catch(() => {}); // tslint:disable-line no-empty\n\t}\n}\n\nexport {\n\tFloat32Array,\n\tgetComputedStyle,\n\tuserAgent,\n\tTRANSFORM,\n\tSUPPORT_TOUCH,\n\tSUPPORT_DEVICEMOTION,\n\tSUPPORT_WILLCHANGE,\n\tcheckXRSupport,\n\tWEBXR_SUPPORTED,\n\tDeviceMotionEvent,\n\tdevicePixelRatio\n};\n\n","const VERSION = \"#__VERSION__#\";\n\nexport {\n\tVERSION\n};\n","import Component from \"@egjs/component\";\nimport { TRANSFORM, SUPPORT_WILLCHANGE } from \"../utils/browserFeature\";\nimport { VERSION } from \"../version\";\n\nexport type SpriteImageEvent = {\n  /**\n   * Events that occur when component loading is complete\n   * @ko 컴포넌트 로딩이 완료되면 발생하는 이벤트\n   * @name eg.view360.SpriteImage#load\n   * @event\n   * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n   * @param {HTMLElement} param.target The target element for which to display the image <ko>이미지를 보여줄 대상 엘리먼트</ko>\n   * @param {HTMLElement} param.bgElement Generated background image element <ko>생성된 background 이미지 엘리먼트</ko>\n   *\n   * @example\n   *\n   * sprites.on({\n   *  \"load\" : function(evt) {\n   *    console.log(\"load event fired - e.target\", e.target, \"e.bgElement\", e.bgElement);\n   *  }\n   * });\n   */\n  load: {\n    target: HTMLElement;\n    bgElement: HTMLDivElement;\n  }\n  /**\n   * An event that occurs when the image index is changed by the user's left / right panning\n   * @ko 사용자의 좌우 Panning 에 의해 이미지 인덱스가 변경되었을때 발생하는 이벤트\n   * @name eg.view360.SpriteImage#imageError\n   * @event\n   * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n   * @param {String} param.imageUrl User-specified image URL <ko>사용자가 지정한 이미지 URL</ko>\n   *\n   * @example\n   *\n   * sprites.on({\n   *  \"imageError\" : function(evt) {\n   *    // Error handling\n   *    console.log(e.imageUrl);\n   *  }\n   * });\n   */\n  imageError: {\n    imageUrl?: string;\n  }\n}\n\n/**\n * @memberof eg.view360\n * @extends eg.Component\n * SpriteImage\n */\nclass SpriteImage extends Component<SpriteImageEvent> {\n  public static VERSION = VERSION;\n\n  private _el: HTMLElement;\n  private _rowCount: number;\n  private _colCount: number;\n  private _totalCount: number;\n  private _width: number | string;\n  private _height: number | string;\n  private _autoHeight: boolean;\n  private _colRow: number[];\n  private _image: HTMLImageElement;\n  private _bg: HTMLDivElement;\n  private _autoPlayReservedInfo: { interval: number; playCount: number; } | null;\n  private _autoPlayTimer: number;\n\n  /**\n   * @class eg.view360.SpriteImage\n   * @classdesc A module that displays a single or continuous image of any one of the \"sprite images\". SpinViewer internally uses SpriteImage to show each frame of the sprite image.\n   * @ko 스프라이트 이미지 중 임의의 한 프레임을 단발성 혹은 연속적으로 보여주는 컴포넌트입니다. SpinViewer 는 내부적으로 SpriteImage 를 사용하여 스프라이트 이미지의 각 프레임을 보여줍니다.\n   * @extends eg.Component\n   *\n   * @param {HTMLElement} element The element to show the image <ko>이미지를 보여줄 대상 요소</ko>\n   * @param {Object} options The option object<ko>파라미터 객체</ko>\n   * @param {String} options.imageUrl The url of the sprite image <ko>스프라이트 이미지의 url</ko>\n   * @param {Number} [options.rowCount=1] Number of horizontal frames in the sprite image <ko>스프라이트 이미지의 가로 프레임 갯수</ko>\n   * @param {Number} [options.colCount=1] Number of vertical frames in the sprite image <ko>스프라이트 이미지의 세로 프레임 갯수</ko>\n   * @param {Number|String} [options.width=\"auto\"] The width of the target element to show the image <ko>이미지를 보여줄 대상 요소의 너비</ko>\n   * @param {Number|String} [options.height=\"auto\"] The height of the target element to show the image <ko>이미지를 보여줄 대상 요소의 높이</ko>\n   * @param {Boolean} [options.autoHeight=true] Whether to automatically set the height of the image area to match the original image's proportion <ko>원본 이미지 비율에 맞게 이미지 영역의 높이를 자동으로 설정할지 여부</ko>\n   * @param {Number[]} [options.colRow=[0, 0]] The column, row coordinates of the first frame of the sprite image (based on 0 index) <ko> 스프라이트 이미지 중 처음 보여줄 프레임의 (column, row) 좌표 (0 index 기반)</ko>\n   * @param {Number} [options.frameIndex=0] frameIndex specifies the index of the frame to be displayed in the \"Sprite image\". The frameIndex order is zero-based and indexed in Z form (left-to-right, top-to-bottom, and newline again from left to right).<br>- colRow is equivalent to frameIndex. However, if colRow is specified at the same time, colRow takes precedence.<ko>스프라이트 이미지 중에서 보여질 프레임의 인덱스를 지정합니다. frameIndex 순서는 0부터 시작하며 Z 형태(왼쪽에서 오른쪽, 위에서 아래, 개행 시 다시 왼쪽 부터)로 인덱싱합니다.<br>- colRow 는 frameIndex 와 동일한 기능을 합니다. 단, colRow 가 동시에 지정된 경우 colRow 가 우선합니다.</ko>\n   * @param {Number} [options.scale=1] Spin scale (The larger the spin, the more).<ko>Spin 배율 (클 수록 더 많이 움직임)</ko>\n   *\n   * @support {\"ie\": \"9+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.3+ (except 3.x)\"}\n   * @example\n   *\n   * // Initialize SpriteImage\n   *\n   * var el = document.getElementById(\"image-div\");\n   * var sprites = new eg.view360.SpriteImage(el, {\n   * \timageUrl: \"/img/bag360.jpg\", // required\n   * \trowCount: 24\n   * });\n   */\n  constructor(element: HTMLElement, options: Partial<{\n    imageUrl: string;\n    rowCount: number;\n    colCount: number;\n    width: number | string;\n    height: number | string;\n    autoHeight: boolean;\n    colRow: number[];\n    frameIndex: number;\n    scale: number;\n  }> = {}) {\n    super();\n    const opt = options || {};\n\n    this._el = element;\n    this._rowCount = opt.rowCount || 1;\n    this._colCount = opt.colCount || 1;\n    this._totalCount = this._rowCount * this._colCount; // total frames\n    this._width = opt.width || \"auto\";\n    this._height = opt.height || \"auto\";\n    this._autoHeight = opt.autoHeight != null ? opt.autoHeight : true; // If autoHeight is specified, _height will be overwritten.\n    this._colRow = [0, 0];\n\n    if (opt.colRow) {\n      this._colRow = opt.colRow;\n    } else if (opt.frameIndex) {\n      this.setFrameIndex(opt.frameIndex);\n    }\n\n    this._el.style.width = SpriteImage._getSizeString(this._width);\n    this._el.style.height = SpriteImage._getSizeString(this._height);\n\n    if (!opt.imageUrl) {\n      setTimeout(() => {\n        this.trigger(\"imageError\", {\n          imageUrl: opt.imageUrl\n        });\n      }, 0);\n      return;\n    }\n\n    this._image = new Image();\n    /**\n     * Event\n     */\n    this._image.onload = () => {\n      this._bg = SpriteImage._createBgDiv(\n        this._image, this._rowCount, this._colCount, this._autoHeight);\n      this._el.appendChild(this._bg);\n      this.setColRow(this._colRow[0], this._colRow[1]);\n\n      this.trigger(\"load\", {\n        target: this._el,\n        bgElement: this._bg\n      });\n\n      if (this._autoPlayReservedInfo) {\n        this.play(this._autoPlayReservedInfo);\n        this._autoPlayReservedInfo = null;\n      }\n    };\n\n    this._image.onerror = e => {\n      this.trigger(\"imageError\", {\n        imageUrl: opt.imageUrl\n      });\n    };\n\n    this._image.src = opt.imageUrl;\n  }\n\n  private static _createBgDiv(img: HTMLImageElement, rowCount: number, colCount: number, autoHeight: boolean) {\n    const el = document.createElement(\"div\");\n\n    el.style.position = \"relative\";\n    el.style.overflow = \"hidden\";\n\n    img.style.position = \"absolute\";\n    img.style.width = `${colCount * 100}%`;\n    img.style.height = `${rowCount * 100}%`;\n    /** Prevent image from being dragged on IE10, IE11, Safari especially */\n    img.ondragstart = () => (false); // img.style.pointerEvents = \"none\";\n    // Use hardware accelerator if available\n    if (SUPPORT_WILLCHANGE) {\n      (img.style.willChange = \"transform\");\n    }\n\n    el.appendChild(img);\n\n    const unitWidth = img.width / colCount;\n    const unitHeight = img.height / rowCount;\n\n    if (autoHeight) {\n      const r = unitHeight / unitWidth;\n\n      el.style.paddingBottom = `${r * 100}%`;\n    } else {\n      el.style.height = \"100%\";\n    }\n\n    return el;\n  }\n\n  private static _getSizeString(size) {\n    if (typeof size === \"number\") {\n      return `${size}px`;\n    }\n\n    return size;\n  }\n\n  /**\n   * Specifies the frameIndex of the frame to be shown in the sprite image.\n   * @ko 스프라이트 이미지 중 보여질 프레임의 frameIndex 값을 지정\n   * @method eg.view360.SpriteImage#setFrameIndex\n   * @param {Number} frameIndex frame index of a frame<ko>프레임의 인덱스</ko>\n   *\n   * @example\n   *\n   * sprites.setFrameIndex(0, 1);// col = 0, row = 1\n   */\n  public setFrameIndex(index: number) {\n    const colRow = this.toColRow(index);\n\n    this.setColRow(colRow[0], colRow[1]);\n  }\n\n  /**\n   * Returns the frameIndex of the frame to be shown in the sprite image.\n   * @ko 스프라이트 이미지 중 보여지는 프레임의 index 값을 반환\n   * @method eg.view360.SpriteImage#getFrameIndex\n   * @return {Number} frame index <ko>frame 인덱스</ko>\n   *\n   * @example\n   *\n   * var frameIndex = sprites.getFrameIndex(); // eg. frameIndex = 1\n   *\n   */\n  public getFrameIndex() {\n    return this._colRow[1] * this._colCount + this._colRow[0];\n  }\n\n  /**\n   * Specifies the col and row values of the frame to be shown in the sprite image.\n   * @ko 스프라이트 이미지 중 보여질 프레임의 col, row 값을 지정\n   * @method eg.view360.SpriteImage#setColRow\n   * @param {Number} col Column number of a frame<ko>프레임의 행값</ko>\n   * @param {Number} row Row number of a frame<ko>프레임의 열값</ko>\n   *\n   * @example\n   *\n   * sprites.setlColRow(1, 2); // col = 1, row = 2\n   */\n  public setColRow(col: number, row: number) {\n    if (row > this._rowCount - 1 || col > this._colCount - 1) {\n      return;\n    }\n\n    if (this._image && TRANSFORM) {\n      // NOTE: Currently, do not apply translate3D for using layer hack. Do we need layer hack for old browser?\n      this._image.style[TRANSFORM] = `translate(${-(col / this._colCount * 100)}%, ${-(row / this._rowCount * 100)}%)`;\n    }\n\n    this._colRow = [col, row];\n  }\n\n  /**\n   * Returns the col and row values of the frame to be shown in the sprite image.\n   * @ko 스프라이트 이미지 중 보여지는 프레임의 col, row 값을환반환\n   * @method eg.view360.SpriteImage#gelColRow\n   * @return {Number[]} Array containing col, row<ko>col, row 정보를 담는 배열</ko>\n   *\n   * @example\n   *\n   * var colRow = sprites.getlColRow();\n   * // colRow = [1, 2] - index of col is 1, index of row is 2\n   *\n   */\n  public getColRow() {\n    return this._colRow;\n  }\n\n  /**\n   * Stop playing\n   * @ko play 되고 있던 프레임 재생을 중지합니다.\n   * @method eg.view360.SpriteImage#stop\n   *\n   * @example\n   *\n   * viewer.stop();\n   *\n   */\n  public stop() {\n    if (this._autoPlayTimer) {\n      clearInterval(this._autoPlayTimer);\n      this._autoPlayTimer = -1;\n    }\n  }\n\n  /**\n   * Switches frames sequentially in the 'interval' starting from the currently displayed frame and plays all frames by 'playCount'.\n   * @ko 현재 보여지고 있는 프레임을 시작으로 'interval' 간격으로 순차적으로 프레임을 전환하며 모든 프레임을 'playCount' 만큼 재생한다.\n   * @method eg.view360.SpriteImage#play\n   * @param {Object} param The parameter object<ko>파라미터 객체</ko>\n   * @param {Number} [param.interval=1000 / totalFrameCount] Interframe Interval - in milliseconds<ko>프레임간 간격 - 밀리세컨드 단위</ko>\n   * @param {Number} [param.playCount=0] PlayCount = 1 in which all frames are reproduced once, and playCount = n in which all frames are repeated n times. playCount = 0 in which all frames are repeated infinitely<ko>모든 프레임을 1회씩 재생한 것이 playCount = 1, 모든 프레임을 n 회 재상한 것이 playCount = n 이 된다. 0 dms 무한반복</ko>\n   *\n   * @example\n   *\n   * viewer.play({angle: 16, playCount: 1});\n   *\n   */\n  public play({ interval, playCount } = { interval: 1000 / this._totalCount, playCount: 0 }) {\n    if (!this._bg) {\n      this._autoPlayReservedInfo = {interval, playCount};\n      return;\n    }\n\n    if (this._autoPlayTimer) {\n      clearInterval(this._autoPlayTimer);\n      this._autoPlayTimer = -1;\n    }\n\n    let frameIndex = this.getFrameIndex();\n    let count = 0;\n    let frameCount = 0; // for checking 1 cycle\n\n    this._autoPlayTimer = window.setInterval(() => {\n      frameIndex %= this._totalCount;\n      const colRow = this.toColRow(frameIndex);\n\n      this.setColRow(colRow[0], colRow[1]);\n      frameIndex++;\n\n      // Done 1 Cycle?\n      if (++frameCount === this._totalCount) {\n        frameCount = 0;\n        count++;\n      }\n\n      if (playCount > 0 && count === playCount) {\n        clearInterval(this._autoPlayTimer);\n      }\n    }, interval);\n  }\n\n  public toColRow(frameIndex: number) {\n    const colCount = this._colCount;\n    const rowCount = this._rowCount;\n\n    if (frameIndex < 0) {\n      return [0, 0];\n    } else if (frameIndex >= this._totalCount) {\n      return [colCount - 1, rowCount - 1];\n    }\n\n    const col = frameIndex % colCount;\n    const row = Math.floor(frameIndex / colCount);\n\n    // console.log(frameIndex, col, row);\n    return [col, row];\n  }\n}\n\nexport default SpriteImage;\n","import SpinViewer from \"./SpinViewer\";\nimport SpriteImage from \"./SpriteImage\";\nimport { VERSION } from \"../version\";\n\nexport default {\n  SpinViewer,\n  SpriteImage,\n  VERSION,\n}\n","import Component from \"@egjs/component\";\nimport Axes, { PanInput } from \"@egjs/axes\";\nimport SpriteImage from \"./SpriteImage\";\nimport { VERSION } from \"../version\";\n\nconst DEFAULT_PAN_SCALE = 0.21;\n\nexport type SpinViewerEvent = {\n  /**\n   * Events that occur when component loading is complete\n   * @ko 컴포넌트 로딩이 완료되면 발생하는 이벤트\n   * @name eg.view360.SpinViewer#load\n   * @event\n   * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n   * @param {HTMLElement} param.target The target element for which to display the image <ko>이미지를 보여줄 대상 엘리먼트</ko>\n   * @param {HTMLElement} param.bgElement Generated background image element <ko>생성된 background 이미지 엘리먼트</ko>\n   *\n   * @example\n   *\n   * viwer.on({\n   *  \"load\" : function(evt) {\n   *    this.spinBy(360, {duration: 300});\n   *  }\n   * });\n   */\n  load: {\n    target: HTMLElement;\n    bgElement: HTMLDivElement;\n  }\n  /**\n   * An event that occurs when the image index is changed by the user's left / right panning\n   * @ko 사용자의 좌우 Panning 에 의해 이미지 인덱스가 변경되었을때 발생하는 이벤트\n   * @name eg.view360.SpinViewer#imageError\n   * @event\n   * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n   * @param {String} param.imageUrl User-specified image URL <ko>사용자가 지정한 이미지 URL</ko>\n   *\n   * @example\n   *\n   * viewer.on({\n   *  \"imageError\" : function(evt) {\n   *    // Error handling\n   *    console.log(e.imageUrl);\n   *  }\n   * });\n   */\n  imageError: {\n    imageUrl?: string;\n  };\n  /**\n   * An event that occurs when the image index is changed by the user's left / right panning\n   * @ko 사용자의 좌우 Panning 에 의해 이미지 인덱스가 변경되었을때 발생하는 이벤트\n   * @name eg.view360.SpinViewer#change\n   * @event\n   * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n   * @param {Number[]} param.colRow Column, row of the frame in the sprite image <ko>스프라이트 이미지 내 프레임의 column, row</ko>\n   * @param {Number} param.frameIndex Index value that is sequentially appended in Z direction based on col and row.<ko>col, row 를 기반으로 Z 방향으로 순차적으로 붙여지는 index 값</ko>\n   * @param {Number} param.angle The angle that is currently internally held at an angle between 0 and 359. (not a real product angle) <ko>0 ~ 359 범위의 각도로 현재 내부적으로 유지하고 있는 각도 (실제 이미지의 각도가 아님)</ko>\n   *\n   * @example\n   *\n   * viwer.on({\n   *  \"change\" : function(evt) {\n   *    console.log(event.frameIndex, event.colRow, event.angle);   // event.colRow = [0, 4] event.frameIndex = 4, event = 30\n   *  }\n   * });\n   */\n  change: {\n    colRow: number[];\n    frameIndex: number;\n    angle: number;\n  };\n  /**\n   * This event is fired when animation ends.\n   * @ko 에니메이션이 끝났을 때 발생하는 이벤트\n   * @name eg.view360.SpinViewer#animationEnd\n   * @event\n   * @param {Object} param The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n   * @param {Boolean} param.isTrusted true if an event was generated by the user action, or false if it was caused by a script or API call<ko>사용자의 액션에 의해 이벤트가 발생하였으면 true, 스크립트나 API호출에 의해 발생하였을 경우에는 false를 반환한다.</ko>\n   *\n   * @example\n   *\n   * viwer.on({\n   *  animationEnd\" : function(evt) {\n   *    // evt.isTrusted === true or false\n   *  }\n   * });\n   */\n  animationEnd: {\n    isTrusted: boolean;\n  }\n}\n\n/**\n * @memberof eg.view360\n * @extends eg.Component\n * SpinViewer\n */\nclass SpinViewer extends Component<SpinViewerEvent> {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @static\n   * @example\n   * eg.view360.SpinViewer.VERSION;  // ex) 3.0.1\n   * @memberof eg.view360.SpinViewer\n   */\n  public static VERSION = VERSION;\n\n  private _el: HTMLElement;\n  private _sprites: SpriteImage;\n  private _axes: Axes;\n  private _panInput: PanInput;\n\n  private _scale: number;\n  private _panScale: number;\n  private _frameCount: number;\n\n  /**\n   * @classdesc A module used to displays each image sequentially according to the direction of the user's touch movement (left / right) of the sprite image that is collected by rotating the object.\n   * @ko 물체 주위를 회전하여 촬영한 이미지들을 모은 스프라이트 이미지를 사용자의 터치 이동 방향(좌 / 우) 에 따라 각 이미지들을 순차적으로 보여주는 컴포넌트입니다.\n   *\n   * @param {HTMLElement} element The element to show the image <ko>이미지를 보여줄 대상 요소</ko>\n   * @param {Object} options The option object<ko>파라미터 객체</ko>\n   * @param {String} options.imageUrl The url of the sprite image <ko>스프라이트 이미지의 url</ko>\n   * @param {Number} [options.rowCount=1] Number of horizontal frames in the sprite image <ko>스프라이트 이미지의 가로 프레임 갯수</ko>\n   * @param {Number} [options.colCount=1] Number of vertical frames in the sprite image <ko>스프라이트 이미지의 세로 프레임 갯수</ko>\n   * @param {Number|String} [options.width=\"auto\"] The width of the target element to show the image <ko>이미지를 보여줄 대상 요소의 너비</ko>\n   * @param {Number|String} [options.height=\"auto\"] The height of the target element to show the image <ko>이미지를 보여줄 대상 요소의 높이</ko>\n   * @param {Boolean} [options.autoHeight=true] Whether to automatically set the height of the image area to match the original image's proportion <ko>원본 이미지 비율에 맞게 이미지 영역의 높이를 자동으로 설정할지 여부</ko>\n   * @param {Number[]} [options.colRow=[0, 0]] The column, row coordinates of the first frame of the sprite image (based on 0 index) <ko> 스프라이트 이미지 중 처음 보여줄 프레임의 (column, row) 좌표 (0 index 기반)</ko>\n   * @param {Number} [options.scale=1] Spin scale (The larger the spin, the more).<ko>Spin 배율 (클 수록 더 많이 움직임)</ko>\n   * @support {\"ie\": \"9+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.3+ (except 3.x)\"}\n   * @example\n   * ```\n   * // Initialize SpinViewer\n   * var el = document.getElementById(\"product-360\");\n   * var viewer = new eg.view360.SpinViewer(el, {\n   * \timageUrl: \"/img/bag360.jpg\", // required\n   * \trowCount: 24 //required\n   * });\n   * ```\n   */\n  constructor(element: HTMLElement, options: Partial<{\n    imageUrl: string;\n    rowCount: number;\n    colCount: number;\n    width: number | string;\n    height: number | string;\n    autoHeight: boolean;\n    colRow: number[];\n    scale: number;\n  }> = {}) {\n    super();\n\n    this._el = element;\n\n    const opt = {...options};\n    const colCount = opt.colCount || 1;\n    const rowCount = opt.rowCount || 1;\n\n    this._scale = (opt.scale || 1);\n    this._panScale = this._scale * DEFAULT_PAN_SCALE;\n\n    this._frameCount = colCount * rowCount;\n\n    // Init SpriteImage\n    this._sprites = new SpriteImage(element, opt).on({\n      \"load\": evt => {\n        this.trigger(\"load\", evt);\n      },\n      \"imageError\": evt => {\n        this.trigger(\"imageError\", {\n          imageUrl: evt.imageUrl\n        });\n      }\n    });\n\n    // Init Axes\n    this._panInput = new PanInput(this._el, {\n      scale: [this._panScale, this._panScale]\n    });\n    this._axes = new Axes({\n      angle: {\n        range: [0, 359],\n        circular: true\n      }\n    }).on({\n      \"change\": evt => {\n        const curr = Math.floor(evt.pos.angle / (360 / this._frameCount));\n        const frameIndex = this._frameCount - curr - 1;\n\n        this._sprites.setFrameIndex(frameIndex);\n\n        this.trigger(\"change\", {\n          frameIndex,\n          colRow: this._sprites.getColRow(),\n          angle: evt.pos.angle\n        });\n      },\n      \"animationEnd\": evt => {\n        this.trigger(\"animationEnd\", {\n          isTrusted: evt.isTrusted\n        });\n      }\n    });\n\n    this._axes.connect(\"angle\", this._panInput);\n  }\n\n  /**\n   * Set spin scale\n   * @ko scale 을 조정할 수 있는 함수\n   * @param {Number} scale Rotation multiples at spin, the larger the rotation<ko>Spin 시 회전 배수값, 커질 수록 더 많이 회전</ko>\n   *\n   * @return {Object} Instance of SpinViewer <ko>SpinViewer 인스턴스</ko>\n   *\n   * @example\n   * viewer.setScale(2);// It moves twice as much.\n   */\n  public setScale(scale: number) {\n    if (isNaN(scale) || scale < 0) {\n      return this;\n    }\n\n    this._scale = scale;\n    this._panScale = scale * DEFAULT_PAN_SCALE;\n    this._panInput.options.scale = [this._panScale, this._panScale];\n\n    return this;\n  }\n\n  /**\n   * Get spin scale\n   * @ko scale 값을 반환한다.\n   *\n   * @return {Number} Rotation multiples at spin, the larger the rotation<ko>Spin 시 회전 배수값, 커질 수록 더 많이 회전</ko>\n   *\n   * @example\n   * viewer.getScale();// It returns number\n   */\n  public getScale() {\n    return this._scale;\n  }\n\n  /**\n   * It gives the effect of rotating for a certain duration by the specified angle based on the current rotation angle.\n   * @ko 현재 회전 각도를 기준으로 지정된 각도(angle)만큼 일정 시간동안(duration) 회전하는 효과를 준다.\n   * @param {Number} [angle = 0] angle<ko>상대적 회전 각도</ko>\n   * @param {Object} param The parameter object<ko>파라미터 객체</ko>\n   * @param {Number} [param.duration = 0] duration<ko>회전할 시간 - 밀리세컨드 단위</ko>\n   *\n   * @return {Object} Instance of SpinViewer <ko>SpinViewer 인스턴스</ko>\n   *\n   * @example\n   * viewer.spinBy(720, {duration: 500});\n   */\n  public spinBy(angle = 0, param = {duration: 0}) {\n    this._axes.setBy({angle}, param.duration);\n    return this;\n  }\n\n  /**\n   * It gives the effect of rotating for a certain duration (duration) by the specified angle (angle).\n   * @ko 지정된 각도(angle)만큼 일정 시간동안(duration) 회전하는 효과를 준다.\n   * @param {Number} [angle = 0] angle<ko>회전 각도</ko>\n   * @param {Object} param The parameter object<ko>파라미터 객체</ko>\n   * @param {Number} [param.duration = 0] duration<ko>회전할 시간 - 밀리세컨드 단위</ko>\n   *\n   * @return {Object} Instance of SpinViewer <ko>SpinViewer 인스턴스</ko>\n   *\n   * @example\n   * viewer.spinTo(30, {duration:100});\n   */\n  public spinTo(angle = 0, param = {duration: 0}) {\n    this._axes.setTo({angle}, param.duration);\n    return this;\n  }\n\n  /**\n   * Returns current angles\n   * @ko 현재 각도를 반환한다.\n   *\n   * @return {Number} Current angle <ko>현재 각도</ko>\n   */\n  public getAngle() {\n    return this._axes.get().angle || 0;\n  }\n}\n\nexport default SpinViewer;\n"],"names":["win","window","Math","self","Function","doc","document","agent","navigator","getAgent","os","name","browser","Float32Array","Array","getComputedStyle","userAgent","DeviceMotionEvent","devicePixelRatio","TRANSFORM","docStyle","documentElement","style","target","i","len","length","SUPPORT_WILLCHANGE","CSS","supports","VERSION","element","options","_super","opt","_this","_el","_rowCount","rowCount","_colCount","colCount","_totalCount","_width","width","_height","height","_autoHeight","autoHeight","_colRow","colRow","frameIndex","setFrameIndex","SpriteImage","_getSizeString","imageUrl","_image","Image","onload","_bg","_createBgDiv","appendChild","setColRow","trigger","bgElement","_autoPlayReservedInfo","play","onerror","e","src","setTimeout","__extends","img","el","createElement","position","overflow","ondragstart","willChange","unitWidth","unitHeight","r","paddingBottom","size","index","this","toColRow","col","row","_autoPlayTimer","clearInterval","_a","count","frameCount","_b","interval","playCount","getFrameIndex","setInterval","floor","Component","SpinViewer","_scale","scale","_panScale","_frameCount","_sprites","on","evt","_panInput","PanInput","_axes","Axes","angle","range","circular","curr","pos","getColRow","isTrusted","connect","isNaN","param","duration","setBy","setTo","get"],"mappings":"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"}